name: reto


services:
  frontend:
    build:
      context: ./reto-frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - '3000:3000'
    # volumes:
      #- ./reto-frontend:/app
      #- /app/node_modules
    environment:
      - MONGODB_URI=mongodb://reto:Extrovert-Unbiased9-Oxidize-Recycler@mongo-1:27016/?authSource=reto
    networks:
      - frontend-net
      - backend-net
      - database-net
  nginx:
    container_name: nginx
    image: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "20080:80"
      - "20443:443"
    networks:
      - frontend-net
      - backend-net
      - database-net
    depends_on:
      - frontend
  rabbit:
    container_name: rabbit 
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_PASS=pass
    ports:
        - 5672:5672
        - 15672:15672
    networks:
      - backend-net
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      start_period: 5s
      start_interval: 1s
      retries: 3
  mongo-1:
    container_name: mongo-1
    image: mongo:7.0
    restart: always
    healthcheck:
      test:  mongosh --port 27016 --quiet      
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: Hamper-Snout0-Sprinkled-Unhidden
      MONGO_INITDB_DATABASE: reto
    command: mongod --port 27016
    ports:
      - 27016:27016
    volumes:
      - ./mongo/config:/docker-entrypoint-initdb.d
      - "mongo1_data:/data/db"
      - "mongo1_config:/data/configdb"

    networks:
      - database-net
  # mongo-1:
  #   container_name: mongo-1
  #   image: mongo:7.0
  #   restart: always
  #   command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
  #   healthcheck:
  #     test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27016',priority:0.5}]}) }" | mongosh --port 27017 --quiet      
  #     interval: 5s
  #     timeout: 30s
  #     start_period: 0s
  #     start_interval: 1s
  #     retries: 30
  #   environment:
  #     # MONGO_INITDB_ROOT_USERNAME: root
  #     # MONGO_INITDB_ROOT_PASSWORD: root
  #     MONGO_INITDB_DATABASE: reto
  #   ports:
  #     - 27017:27017
  #   volumes:
  #     - ./mongo/config:/docker-entrypoint-initdb.d
  #     - "mongo1_data:/data/db"
  #     - "mongo1_config:/data/configdb"

  #   networks:
  #     - database-net
  # mongo-2:
  #   container_name: mongo-2
  #   image: mongo:7.0
  #   command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27016"]
  #   ports:
  #     - 27018:27018
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   volumes:
  #     - "mongo2_data:/data/db"
  #     - "mongo2_config:/data/configdb"

  event-ingestion:
    build: 
      context: ./event-ingestion
      dockerfile: Dockerfile
    container_name: event-ingestion
    environment:
      - RABBIT_HOST=rabbit
      - RABBIT_PORT=5672
      - RABBIT_USER=guest
      - RABBIT_PASS=pass
    depends_on:
      - rabbit
    ports:
      - '3205:3205'
    networks:
      - backend-net
    profiles:
      - backend
  event-processing:
    build: 
      context: ./event-processing
      dockerfile: Dockerfile
    container_name: event-processing
    environment:
      - MONGODB_URI=mongodb://reto:Extrovert-Unbiased9-Oxidize-Recycler@mongo-1:27016/?authSource=reto
      - RABBIT_HOST=rabbit
      - RABBIT_PORT=5672
      - RABBIT_USER=guest
      - RABBIT_PASS=pass
    depends_on:
      rabbit:
        condition: service_healthy
      mongo-1:
        condition: service_started
    networks:
      - backend-net
      - database-net
    profiles:
      - backend

  event-generation:
    build: 
      context: ./event-generation
      dockerfile: Dockerfile
    container_name: event-generation
    ports:
      - 3210:3210
    environment:
      - AVG_TIME_BETWEEN_EVENTS_MS=1000
      - STD_DV_TIME_BETWEEN_EVENTS_MS=100
      - GITHUB_ENABLED=true
      - AZURE_REPOS_ENABLED=false
      - GITLAB_ENABLED=false
      - GITHUB_ACTIONS_ENABLED=false
      - AZURE_PIPELINES_ENABLED=false
      - WS_HOST=event-ingestion:3205
    depends_on:
      - event-ingestion
    networks:
      - backend-net
    profiles:
      - backend
  

volumes:
  mongo1_data:
  mongo1_config:
  mongo2_data:
  mongo2_config:

networks:
  frontend-net:
  backend-net:
  database-net: